// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: olympus/scraper.proto

package olympus

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ScraperService_GetEmployees_FullMethodName  = "/scraper.ScraperService/GetEmployees"
	ScraperService_GetDailyTasks_FullMethodName = "/scraper.ScraperService/GetDailyTasks"
	ScraperService_GetTaskTypes_FullMethodName  = "/scraper.ScraperService/GetTaskTypes"
)

// ScraperServiceClient is the client API for ScraperService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScraperServiceClient interface {
	// Method to get a list of employees.
	GetEmployees(ctx context.Context, in *GetEmployeesRequest, opts ...grpc.CallOption) (*GetEmployeesResponse, error)
	// Method for getting tasks for the current day.
	GetDailyTasks(ctx context.Context, in *GetDailyTasksRequest, opts ...grpc.CallOption) (*GetDailyTasksResponse, error)
	// Method to get a list of type of tasks.
	GetTaskTypes(ctx context.Context, in *GetTaskTypesRequest, opts ...grpc.CallOption) (*GetTaskTypesResponse, error)
}

type scraperServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScraperServiceClient(cc grpc.ClientConnInterface) ScraperServiceClient {
	return &scraperServiceClient{cc}
}

func (c *scraperServiceClient) GetEmployees(ctx context.Context, in *GetEmployeesRequest, opts ...grpc.CallOption) (*GetEmployeesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEmployeesResponse)
	err := c.cc.Invoke(ctx, ScraperService_GetEmployees_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scraperServiceClient) GetDailyTasks(ctx context.Context, in *GetDailyTasksRequest, opts ...grpc.CallOption) (*GetDailyTasksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDailyTasksResponse)
	err := c.cc.Invoke(ctx, ScraperService_GetDailyTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scraperServiceClient) GetTaskTypes(ctx context.Context, in *GetTaskTypesRequest, opts ...grpc.CallOption) (*GetTaskTypesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTaskTypesResponse)
	err := c.cc.Invoke(ctx, ScraperService_GetTaskTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScraperServiceServer is the server API for ScraperService service.
// All implementations must embed UnimplementedScraperServiceServer
// for forward compatibility.
type ScraperServiceServer interface {
	// Method to get a list of employees.
	GetEmployees(context.Context, *GetEmployeesRequest) (*GetEmployeesResponse, error)
	// Method for getting tasks for the current day.
	GetDailyTasks(context.Context, *GetDailyTasksRequest) (*GetDailyTasksResponse, error)
	// Method to get a list of type of tasks.
	GetTaskTypes(context.Context, *GetTaskTypesRequest) (*GetTaskTypesResponse, error)
	mustEmbedUnimplementedScraperServiceServer()
}

// UnimplementedScraperServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedScraperServiceServer struct{}

func (UnimplementedScraperServiceServer) GetEmployees(context.Context, *GetEmployeesRequest) (*GetEmployeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployees not implemented")
}
func (UnimplementedScraperServiceServer) GetDailyTasks(context.Context, *GetDailyTasksRequest) (*GetDailyTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailyTasks not implemented")
}
func (UnimplementedScraperServiceServer) GetTaskTypes(context.Context, *GetTaskTypesRequest) (*GetTaskTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskTypes not implemented")
}
func (UnimplementedScraperServiceServer) mustEmbedUnimplementedScraperServiceServer() {}
func (UnimplementedScraperServiceServer) testEmbeddedByValue()                        {}

// UnsafeScraperServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScraperServiceServer will
// result in compilation errors.
type UnsafeScraperServiceServer interface {
	mustEmbedUnimplementedScraperServiceServer()
}

func RegisterScraperServiceServer(s grpc.ServiceRegistrar, srv ScraperServiceServer) {
	// If the following call pancis, it indicates UnimplementedScraperServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ScraperService_ServiceDesc, srv)
}

func _ScraperService_GetEmployees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmployeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScraperServiceServer).GetEmployees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScraperService_GetEmployees_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScraperServiceServer).GetEmployees(ctx, req.(*GetEmployeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScraperService_GetDailyTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDailyTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScraperServiceServer).GetDailyTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScraperService_GetDailyTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScraperServiceServer).GetDailyTasks(ctx, req.(*GetDailyTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScraperService_GetTaskTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScraperServiceServer).GetTaskTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScraperService_GetTaskTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScraperServiceServer).GetTaskTypes(ctx, req.(*GetTaskTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScraperService_ServiceDesc is the grpc.ServiceDesc for ScraperService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScraperService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scraper.ScraperService",
	HandlerType: (*ScraperServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEmployees",
			Handler:    _ScraperService_GetEmployees_Handler,
		},
		{
			MethodName: "GetDailyTasks",
			Handler:    _ScraperService_GetDailyTasks_Handler,
		},
		{
			MethodName: "GetTaskTypes",
			Handler:    _ScraperService_GetTaskTypes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "olympus/scraper.proto",
}
